name: Release

on:
  push:
    tags:
      - "v*"            # Trigger on tag push (e.g. "v1.0.0"). Adjust pattern as needed.
  workflow_dispatch: # Allow manual triggering of the workflow.
    inputs:
      create_release:
        description: 'Create a GitHub release from the latest tag'
        required: true
        type: boolean
        default: false

permissions:
  contents: write

env:
  # Set the default Rust toolchain to use for all jobs
  RUSTUP_TOOLCHAIN: nightly-2025-04-06

jobs:
  build-linux-x86_64:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "clients/cli -> target"
          cache-all-crates: "true"
          cache-on-failure: "true"
          key: "linux-x86_64"

      - name: Install & Use `mold`
        uses: rui314/setup-mold@v1

      # Set up the Rust toolchain for the specified target(s)
      # When passing an explicit toolchain... you'll want to use "dtolnay/rust-toolchain@master"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          targets: x86_64-unknown-linux-gnu
          components: rustfmt

      - name: Debug Rust environment
        run: |
          echo "Rust version: $(rustc --version --verbose)"
          echo "Cargo version: $(cargo --version)"
          echo "Rustup installed targets: $(rustup target list --installed | tr '\n' ',' | sed 's/,$//')"
          echo "Rustup active toolchain: $(rustup show active-toolchain)"
          echo "Host target: $(rustc -vV | grep host)"

      - name: Build Linux x86_64 binary
        working-directory: clients/cli
        run: cargo build --release --target x86_64-unknown-linux-gnu
        env:
          RUSTFLAGS: "-C target-cpu=generic -C target-feature=+crt-static"

      # Rename the binary to indicate the target OS
      - name: Rename binary
        working-directory: clients/cli/target/x86_64-unknown-linux-gnu/release/
        run: cp nexus-network nexus-network-linux-x86_64

      # Upload the binary as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-network-linux-x86_64 # Name of the artifact
          path: clients/cli/target/x86_64-unknown-linux-gnu/release/nexus-network-linux-x86_64 # Path to file to upload

  release:
    name: Create Release
#    needs: [ build-linux-x86_64, build-linux-arm64, build-macos-x86_64, build-macos-arm64, build-windows-x86_64 ]
    needs: [ build-linux-x86_64 ]
    if: github.event.inputs.create_release == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded artifacts (debug)
        run: ls -lh artifacts/

      - name: Generate individual .sha256 files
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" | awk '{print $1}' > "$file.sha256"
            fi
          done
          ls -lh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
#          tag_name: v${{ github.run_number }}
          tag_name: v${{ github.ref_name }}
          files: |
            artifacts/nexus-network-linux-x86_64
            artifacts/nexus-network-linux-x86_64.sha256
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
